#Configuração do ambiente de desenvolvimento

#server
server.error.include-stacktrace=never

# Spring datasource (// jdbcurl when I use config class, if not use just url)
#spring.datasource.url=${pathdb:jdbc:postgresql://localhost:5432/app-proposta?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=UTC}
#spring.datasource.username=${POSTGRES_USER:postgres}
#spring.datasource.password=${POSTGRES_PASSWORD:postgres}
#spring.datasource.testWhileIdle=true
#spring.datasource.validationQuery=SELECT 1
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
#spring.jpa.properties.hibernate.default_schema=api-proposta


#JPA
#spring.jpa.hibernate.ddl-auto=create-drop
#spring.jpa.properties.hibernate.show_sql=true
#spring.jpa.properties.hibernate.format_sql=true


#RabbitMQ
spring.rabbitmq.host=${RABBITMQ_HOST:localhost}
spring.rabbitmq.port=${RABBITMQ_PORT:5672}
spring.rabbitmq.username=${RABBITMQ_USER:guest}
spring.rabbitmq.password=${RABBITMQ_PASSWORD:guest}
spring.rabbitmq.listener.simple.retry.enabled=${RABBITMQ_LISTENER_SIMPLE_RETRY_ENABLED:true}
spring.rabbitmq.listener.simple.retry.max-attempts=${RABBITMQ_LISTENER_SIMPLE_RETRY_MAX_ATTEMPTS:3}

#exchange
rabbitmq.propostapendent.exchange=${propostapendent_exchange:proposta-pendente.ex}
rabbitmq.propostaconcluida.exchange=${propostaconcluida_exchange:proposta-concluida.ex}

#queue
rabbitmq.queue.proposta.pendente=${queue_proposta_pendente:proposta-pendente.ms-notificacao}
rabbitmq.queue.proposta.concluida=${queue_proposta_concluida:proposta-concluida.ms-notificacao}

#AWS package
aws.acessKey=${ACESS_KEY}
aws.secretKey=${SECRET_KEY}